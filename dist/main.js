(()=>{"use strict";class t{constructor(t,e,s){this.title=t,this.desc=e,this.date=s}setTitle(t){this.title=t}getTitle(){return this.title}setDesc(t){this.desc=t}getDesc(){return this.desc}setDate(t){this.date=t}getDate(){return this.date}}class e{static getModal(){return document.querySelector(".modal-container")}static getContent(){return document.querySelector("#content")}static removeTask(){document.querySelectorAll(".checkbox").forEach((t=>{t.addEventListener("click",(t=>{t.target.parentNode.remove()}))}))}static openModal(){document.querySelector(".addBtn").addEventListener("click",(()=>{this.getModal().classList.add("show"),this.handleForm()}))}static closeModal(){document.querySelector("#closeModalBtn").addEventListener("click",(()=>{this.getModal().classList.remove("show")}))}static addTask(t,e,s){const o=document.createElement("div");o.classList.add("todo-item");const c=document.createElement("input");c.classList.add("checkbox"),c.type="checkbox";const a=document.createElement("p");a.classList.add("title");const d=document.createElement("p");d.classList.add("desc");const n=document.createElement("p");n.classList.add("date"),a.textContent=t,d.textContent=e,n.textContent=s,o.appendChild(c),o.appendChild(a),o.appendChild(d),o.appendChild(n),this.getContent().appendChild(o)}static handleForm(){const e=document.querySelector("#myForm");e.addEventListener("submit",(s=>{s.preventDefault();const o=new FormData(e);let c=new t(o.get("title"),o.get("desc"),o.get("date"));console.log(c.getTitle()),console.log(c.getDesc());let a=[];for(let t of o)a.push(t[1]);this.addTask(a[0],a[1],a[2]),this.removeTask()}))}}console.log("Hello world"),e.openModal(),e.closeModal(),e.removeTask(),class{static addEntry(t,e){localStorage.setItem(t,JSON.stringify(e)),console.log("Storage func")}}.addEntry("Key1","ASIHDKASDHJKL")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,