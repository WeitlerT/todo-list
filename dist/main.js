(()=>{"use strict";class e{constructor(e,t,o){this.title=e,this.desc=t,this.date=o}setTitle(e){this.title=e}getTitle(){return this.title}setDesc(e){this.desc=e}getDesc(){return this.desc}setDate(e){this.date=e}getDate(){return this.date}}class t{static addEntry(e,t){localStorage.setItem(e,JSON.stringify(t)),console.log(`Key: ${e} with Data: ${t} has been stored`)}static removeEntry(e){localStorage.removeItem(e),console.log(`Entry with key ${e} has been removed`)}static fetchProjects(e){for(let e=0;e<localStorage.length;e++){const t=localStorage.key(e),o=localStorage.getItem(t);console.log(`Key:${t} Value:${o}`)}return localStorage.getItem(e)}}class o{constructor(e){this.name=e,this.todos=[]}setName(e){this.name=e}getName(){return this.name}setTodo(e){this.todos=e}getTodo(){return this.todos}}class c{static loadProjects(){t.fetchProjects()}static removeTask(){document.querySelectorAll(".checkbox").forEach((e=>{e.addEventListener("click",(e=>{e.target.parentNode.remove(),t.removeEntry("Key1")}))}))}static openProjectModal(){const e=document.querySelector(".addProjBtn"),t=document.querySelector("#projectModalContainer");e.addEventListener("click",(()=>{t.classList.add("show"),this.handleProjectForm()}))}static closeProjectModal(){const e=document.querySelector("#closeProjectModalBtn"),t=document.querySelector("#projectModalContainer");e.addEventListener("click",(()=>{t.classList.remove("show")}))}static openModal(){const e=document.querySelector(".modal-container");document.querySelector(".addBtn").addEventListener("click",(()=>{e.classList.add("show"),this.handleForm()}))}static closeModal(){const e=document.querySelector(".modal-container");document.querySelector("#closeModalBtn").addEventListener("click",(()=>{e.classList.remove("show")}))}static addProject(e){const t=document.querySelector("#projectList"),o=document.createElement("li");o.textContent=e,t.appendChild(o)}static handleProjectForm(){const e=document.querySelector("#projectForm");e.addEventListener("submit",(c=>{c.preventDefault();const s=new FormData(e);let a=new o(s.get("name"));this.addProject(s.get("name")),t.addEntry(s.get("name"),a)}))}static addTask(e,t,o){const c=document.querySelector("#content"),s=document.createElement("div");s.classList.add("todo-item");const a=document.createElement("input");a.classList.add("checkbox"),a.type="checkbox";const n=document.createElement("p");n.classList.add("title");const d=document.createElement("p");d.classList.add("desc");const r=document.createElement("p");r.classList.add("date"),n.textContent=e,d.textContent=t,r.textContent=o,s.appendChild(a),s.appendChild(n),s.appendChild(d),s.appendChild(r),c.appendChild(s)}static handleForm(){const t=document.querySelector("#todoForm");t.addEventListener("submit",(o=>{o.preventDefault();const c=new FormData(t);new e(c.get("title"),c.get("desc"),c.get("date"));let s=[];for(let e of c)s.push(e[1]);this.addTask(s[0],s[1],s[2]),this.removeTask()}))}}console.log("Hello world"),c.openModal(),c.closeModal(),c.removeTask(),c.openProjectModal(),c.closeProjectModal(),c.loadProjects()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,